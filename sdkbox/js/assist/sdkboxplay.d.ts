declare module sdkbox {     module SdkboxPlayListener {        /**        * Call method invoked when the Plugin connection changes its status.        * Values are as follows:        *   + GPS_CONNECTED:       successfully connected.        *   + GPS_DISCONNECTED:    successfully disconnected.        *   + GPS_CONNECTION_ERROR:error with google play services connection.        */        export function onConnectionStatusChanged(status : number) : object;
        /**        * Callback method invoked when an score has been successfully submitted to a leaderboard.        * It notifies back with the leaderboard_name (not id, see the sdkbox_config.json file) and the        * subbmited score, as well as whether the score is the daily, weekly, or all time best score.        * Since Game center can't determine if submitted score is maximum, it will send the max score flags as false.        */        export function onScoreSubmitted(leaderboard_name : string , score : number , maxScoreAllTime : boolean , maxScoreWeek : boolean , maxScoreToday : boolean) : object;
        /**        * Callback method invoked from a call to `getMyScore` method.        * `time_span` and `collection_type` are the supplied values to `getMyScore` method call.        */        export function onMyScore(leaderboard_name : string , time_span : number , collection_type : number , score : number) : object;
        /**        * Callback method invoked from a call to `getMyScore` method and the method was errored.        * `time_span` and `collection_type` are the supplied values to `getMyScore` method call.        * `error_code` and `error_description` give extended info about the error.        */        export function onMyScoreError(leaderboard_name : string , time_span : number , collection_type : number , error_code : number , error_description : string) : object;
        /**        * Callback method invoked from a call to `getPlayerCenteredScores` method.        * `json_with_score_entries` is an json array enconded string, each of which elements is of the form:        * Each json element contains the following information:        * ```json        *   {        *      "display_rank"          : string,        *      "display_score"         : string,        *      "rank"                  : number,   // long        *      "score"                 : number,   // long,        *      "holder_display_name"   : string,        *      "hires_imageuri"        : string,    // content:// protocol        *      "lowres_imageuri"       : string,        *      "tag"                   : string,        *      "timestamp_millis"      : long        *    }        * ```        * `time_span` and `collection_type` are the values supplied to `getPlayerCenteredScores` method.        */        export function onPlayerCenteredScores(leaderboard_name : string , time_span : number , collection_type : number , json_with_score_entries : string) : object;
        /**        * Callback method invoked from a call to `getPlayerCenteredScores` method was errored.        * `time_span` and `collection_type` are the values supplied to `getPlayerCenteredScores` method.        * `error_code` and `error_description` give extended info about the error.        */        export function onPlayerCenteredScoresError(leaderboard_name : string , time_span : number , collection_type : number , error_code : number , error_description : string) : object;
        /**        * Callback method invoked when the request call to increment an achievement is succeessful and        * that achievement gets unlocked. This happens when the incremental step count reaches its maximum value.        * Maximum step count for an incremental achievement is defined in the google play developer console.        */        export function onIncrementalAchievementUnlocked(achievement_name : string) : object;
        /**        * Callback method invoked when the request call to increment an achievement is successful.        * If possible (Google play only) it notifies back with the current achievement step count.        */        export function onIncrementalAchievementStep(achievement_name : string , step : number) : object;
        export function onIncrementalAchievementStepError(name : string , steps : number , error_code : number , error_description : string) : object;
        /**        * Call method invoked when the request call to unlock a non-incremental achievement is successful.        * If this is the first time the achievement is unlocked, newUnlocked will be true.        */        export function onAchievementUnlocked(achievement_name : string , newlyUnlocked : boolean) : object;
        export function onAchievementUnlockError(achievement_name : string , error_code : number , error_description : string) : object;
        /**        * Method invoked after calling plugin's `loadAchievements` method.        * The `json_achievements_info` parameter is a json array encoded string.        * #### Android fields:        * each array element is of the form:        * ```json        *   {        *      "id"                        : string,        *      "name"                      : string,        *      "xp_value"                  : string,   // experience value        *      "last_updated_timestamp"    : number,        *      "description"               : string,        *      "type"                      : number,   // 0 = standard, 1 = incremental        *      "state"                     : number,   // 0 = unlocked, 1 = revealed,   2 = hidden        *      "unlocked_image_uri"        : string,   // content:// protocol        *      "revealed_image_uri"        : string,   // content:// protocol        *   }        * ```        *   If the achievement is incremental, these fileds will also be available:        * ```json        *   {        *      "formatted_current_steps"   : string,        *      "formatted_total_steps"     : string,        *      current_steps"              : number,        *      "total_steps"               : number        *   }        * ```        * #### IOS fields:        * ```json        *   {        *      "id"                        : string,        *      "name"                      : string,        *      "xp_value"                  : number, int        *      "last_updated_timestamp"    : number,        *      "description"               : string,   // maybe empty if no achievemnt submission happened before.        *      "state"                     : number,   // 0 = unlocked, 1 = revealed,   2 = hidden        *      "type"                      : 1,        // on ios all achievemtns are incremental.        *      "current_steps"             : number,   // double value. percentage 0.0 .. 100.0        *      "total_steps"               : number,   // 100.0        *   }        *  ```        *  iOS only fields:        * ```json        *   {        *      "replayable"                : boolean,        *   }        * ```        */        export function onAchievementsLoaded(reload_forced : boolean , json_achievements_info : string) : object;
        export function onSetSteps(name : string , steps : number) : object;
        export function onSetStepsError(name : string , steps : number , error_code : number , error_description : string) : object;
        export function onReveal(name : string) : object;
        export function onRevealError(name : string , error_code : number , error_description : string) : object;
        /**        ****** DEPRECATED ******        * @param action std::string save, load        * @param name std::string        * @param data std::string        * @param error std::string if load/save success, error will be empty        *        */        export function onGameData(action : string , name : string , data : string , error : string) : object;
        /**        * @param success bool        * @param error std::string if success, error will be empty        *        */        export function onSaveGameData(success : boolean , error : string) : object;
        /**        * @param savedData SavedGameData*        * @param error std::string if success, error will be empty        *        */        export function onLoadGameData(savedData : object , error : string) : object;
        /**        * @param names std::vector<std::string>&        * @param error std::string if success, error will be empty        *        */        export function onGameDataNames(names : object , error : string) : object;
        /**        * trigger after call generateIdentityVerificationSignature        */        export function onGenerateIdentityVerificationSignature(publicKeyUrl : string , signatureBase64 : string , saltBase64 : string , timestamp : object , error : string) : object;
    }     module PluginSdkboxPlay {        /**        * Set GDPR        *        * **NOTE**: please call before 'init' function        */        export function setGDPR(enabled : boolean) : object;
        /**        * Initialize the plugin instance.        * The plugin initializes from the sdkbox_config.json file, and reads a configuration of the form:        * {        *     "leaderboards"     : LeaderboardObject[],        *     "achievements"     : AchievementObject[],        *     "connect_on_start" : boolean,        *     "debug"            : boolean,        *     "enabled"          : boolean        * }        *        * debug:        *    is a common value to all plugins which enables debug info to be sent to the console. Useful when developing.        * enabled:        *    is a common value to all plugins, which enables or disables the plugin. If enabled is false, the plugin methods will do nothing.        * connect_on_start:        *    tells the plugin to make an automatic connection to Google Play Services on application startup.        * leaderboards:        *    a collection of objects of the form:        *    {        *        "id"   : // google play's assigned leaderboard id        *        "name" : // human readable leaderboard name. You'll request leaderboard actions with this name.        *    }        * achievements:        *    a collection of objects of the form:        *    {        *        "id"          : // google play's assigned achievement id.        *        "name"        : // human readable achievement name. You'll request achievement actions with this name.        *        "incremental" : // boolean        *    }        */        export function init() : boolean;
        /**        * Set SdkboxPlay plugin listener.        */        export function setListener(listener : object) : object;
        /**        * Get the plugin's listener.        */        export function getListener() : object;
        /**        * Remove the listener.        * This plugin allows only for one listener which will be disabled after calling this method.        */        export function removeListener() : object;
        /**        * Use this to get the version of the SDK.        * @return The version of the SDK.        */        export function getVersion() : string;
        /**        * Request submission of an score value to a leaderboard name defined in sdkbox_config.json file.        * If the leaderboard name does not exists, or the id associated is not defined in the Developer Console for the application,        * the call will silently fail.        * If everything's right, it will notify the method <code>onScoreSubmitted</code>.        */        export function submitScore(leaderboard_name : string , score : number) : object;
        /**        * Request to show all leaderboards.        */        export function showAllLeaderboards() : object;
        /**        * Request to show the default Leaderboard view.        * In this view you'll be able to interactively select between daily, weekly or all-time leaderboard time frames and the scope        * to global or you google play's friends results.        *        * Android only:        *  if empty string or __ALL__ is used as leaderboard_name, sdkbox play will invoke an activity        *  with all game-defined leader boards.        */        export function showLeaderboard(leaderboard_name : string) : object;
        /**        * Get The signed-in user score for an specified leaderboard.        * This method notifies its result in a call to SdkboxPlay's listener <code>onMyScore</code> method.        * <code>time_span</code> offers the abbility to filter leaderboard for one of the three time spans each        * leaderboard offers. Values are:        *  + 0 : daily time span        *  + 1 : weekly time span        *  + any other value : all time time span.        * <code>collection_type</code> is to filter the leaderboard between social or global scopes.        * Values are:        *  + 1 : social collection type        *  + any other value : global collection type        *        */        export function getMyScore(leaderboard_name : string , time_span : number , collection_type : number) : object;
        /**        * Get leaderboard information.        * This method notifies its result in a call to SdkboxPlay's listener `onPlayerCenteredScores` method.        * The information supplied is a json array encoded string.        * Each json element contains the following information:        * ```json        *   {        *      "display_rank"          : string,        *      "display_score"         : string,        *      "rank"                  : number,   // long        *      "score"                 : number,   // long,        *      "holder_display_name"   : string,        *      "hires_imageuri"        : string,    // content:// protocol        *      "lowres_imageuri"       : string,        *      "tag"                   : string,        *      "timestamp_millis"      : long        *    }        * ```        * <code>time_span</code> offers the abbility to filter leaderboard for one of the three time spans each        * leaderboard offers. Values are:        *  + 0 : daily time span        *  + 1 : weekly time span        *  + any other value : all time time span.        * <code>collection_type</code> is to filter the leaderboard between social or global scopes.        * Values are:        *  + 1 : social collection type        *  + any other value : global collection type        */        export function getPlayerCenteredScores(leaderboard_name : string , time_span : number , collection_type : number , number_of_entries : number) : object;
        /**        * Load achievements metadata.        * A forece reload will force a cloud-side requery of the achievements information.        * See `onAchievementsLoaded` for a description on the returned information.        */        export function loadAchievements(force_reload : boolean) : object;
        /**        * Request to unlock an achievement defined by its name.        * This method assumes the achievement is non incremental.        * If the achievement type is incorrectly defined in the configuration file, or the play services determines it is of the wrong type,        * this method will fail silently.        * Otherwise, if everything is right, the method <code>onAchievementUnlocked</code> will be invoked on the plugin listener.        */        export function unlockAchievement(achievement_name : string) : object;
        /**        * Request to increment the step count of an incremental achievement by the specified number of steps.        * This method assumes the achievement is incremental.        * If the achievement type is incorrectly defined in the configuration file, or the play services determines it is of the wrong type,        * this method will fail silently.        * If the call is successful, this method may invoke two different methods:        *   + <code>onIncrementalAchievementStep</code> if the achievement is not unlocked.        *   + <code>onIncrementalAchievementUnlocked</code> the first time it's been newly unlocked.        * On Android, the achievement is set to a fixed number of incremental steps. On iOS, the achievment is set as        * a percentage value (0..100). In either case, the `increment` value will be added to the current achievement's        * value.        */        export function incrementAchievement(achievement_name : string , increment : number) : object;
        /**        * Request to show the default Achievements view.        * In this view, you'll only see public achievements.        * It will show wether or not achievements are unlocked, and the steps towards unlocking it for incremental achievements.        * Total experience count is measured as well.        */        export function showAchievements() : object;
        /**        * Reveal a hidden achievement.        * This method will notify on plugin's listener `onReveal` or `onRevelError` methods.        */        export function reveal(achievement_name : string) : object;
        /**        * Set an incremental achievement to the given amount of steps.        * If achievement's current steps are already equal or bigger the specified steps, nothing will happen.        * This method will  notify on plugin's listener `onSetSteps` or `onSetStepsError` methods.        */        export function setSteps(achievement_name : string , steps : number) : object;
        /**        * Fast method to know plugin's connection status.        * @deprecated        */        export function isConnected() : boolean;
        /**        * Same as isConnected (deprecated) but more consistent with naming.        */        export function isSignedIn() : boolean;
        /**        * Request connection to the platform-specific services backend.        * This method will invoke plugin's listener <code>onConnectionStatusChanged</code> method.        */        export function signin(showLoginUI : boolean) : object;
        /**        * Request disconnection from the GooglePlay/Game Center backend.        * This method will invoke plugin's listener <code>onConnectionStatusChanged</code> method.        */        export function signout() : object;
        /**        * Get the currently logged in player's id.        */        export function getPlayerId() : string;
        /**        * Get a field from the user account's info obtained after authentication.        * Current values are:        * iOS/Android        * -----------        *   + display_name        *   + name        *   + player_id        * Android only:        * -------------------        *   + title        *   + icon_image_uri        *   + hires_image_uri        *   + last_play_timestamp        *   + retrieved_timestamp        *   + server_auth_code        * If a field not valid is queried an empty string will be returned.        */        export function getPlayerAccountField(field : string) : string;
        /**        * Calling this class method deletes all progress towards achievements        * previously reported for the local player. Hidden achievements that        * were previously visible are now hidden again.        *        * iOS Only        */        export function resetAchievements() : object;
        /**        ****** DEPRECATED ****** Please use loadAllGameData to replace        * load all saved user game data in clound        * will trigger onGameData callback        */        export function loadAllData() : object;
        /**        ****** DEPRECATED ****** Please use loadAllGameData to replace        * load one saved user game data in clound        * will trigger onGameData callback        */        export function loadGameData(save_name : string) : object;
        /**        ****** DEPRECATED ****** Please use saveGameDataBinary(name, data, length) to replace        * save user game data in cloud        * will trigger onGameData callback        */        export function saveGameData(save_name : string , data : string) : object;
        /**        * fetch game data names        * will trigger onGameDataNames        */        export function fetchGameDataNames() : object;
        /**        * load game data item        * will trigger onLoadGameData        *        */        export function loadOneGameData(name : string) : object;
        /**        * load all saved game data        * will trigger onLoadGameData callback        */        export function loadAllGameData() : object;
        /**        * save user game data        * will trigger onSaveGameData callback        *        * @param name: saved data name        * @param data: data pointer        * @param length: data length in byte        *        * Note: if you want to save string, please translate to void*        *        * In JavaScript, please use        * ```javascript        * sdkbox.PluginSdkboxPlay.saveGameDataBinary('name', 'stringdata');        * ```        *        */        export function saveGameDataBinary(name : string , data : object , length : number) : object;
        /**        * Generates a signature that allows a third party server to authenticate the local player.        * just vaild on iOS        *        * https://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign        *        * Note: on Android, you can get server_auth_code from getPlayerAccountField        *        */        export function generateIdentityVerificationSignature() : object;
    }     module SavedGameData {    }}